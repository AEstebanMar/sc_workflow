
<!--begin.rcode setup

    colGEX <- c("grey85", "#FEE5D9", "#FCBBA1", "#FC9272", "#FB6A4A", "#EF3B2C", "#CB181D", "#99000D")
    int_columns <- plotter$hash_vars$int_columns
    target_genes <- plotter$hash_vars$target_genes
    markers <- plotter$hash_vars$markers
    DEG_list <- plotter$hash_vars$DEG_list
    
    Custom_DotPlot <- function(seu) {
        scCustomize::DotPlot_scCustom(seu, features, flip_axes = TRUE, 
                                      colors_use = colGEX, x_lab_rotate = TRUE)
    }

    Custom_DimPlot <- function(seu) {
        Seurat::DimPlot(seu, reduction = reduction, label = TRUE, repel = TRUE, split.by = split.by,
                        group.by = group.by) +
        ggplot2::theme(legend.position="none")
    }

    top_table <- function(df) {
        res <- df[order(df$avg_log2FC, decreasing = TRUE), ][1:10, ]
        return(res)
    }

    subset_table <- function(df) {
        res <- df[features, ][complete.cases(df[features, ]), ]
        return(res)
    }

    Top_vlnplot <- function(seu) {
        scCustomize::Stacked_VlnPlot(seu,
                        ncol = 1, pt.size = 0, x_lab_rotate = TRUE,
                        features = features)
    }

    Canon_vlnplot <- function(seu) {
        scCustomize::Stacked_VlnPlot(seu,
                        ncol = 1, pt.size = 0, x_lab_rotate = TRUE,
                        features = features)
    }

    Custom_ftplot <- function(seu) {
        scCustomize::FeaturePlot_scCustom(seu, reduction = "umap", pt.size = 0.1, num_columns = 3,
                  features = features) +
        ggplot2::theme_classic(base_size = 18) +
        ggplot2::scale_color_gradientn(colors = colGEX) + ggplot2::coord_fixed()
    }

    DEGs_volcano <- function(input_DEGs) {
        EnhancedVolcano::EnhancedVolcano(input_DEGs,
                                         lab = rownames(input_DEGs),
                                         x = 'avg_log2FC', y = 'p_val_adj',
                                         ylim = -0.5,
                                         title = level,
                                         pCutoff = 0.05, FCcutoff = 0.1)
    }

    top_by_p_adj <- function(df, top_N) {
        res <- head(df[order(df$p_val_adj), ], top_N)
        return(res)
    }
    
end.rcode-->

<!--begin.rcode title
cat(paste0("<h1><strong>Single-Cell RNASeq Integration analysis"))
end.rcode-->
</strong></h1>

<h1><strong>Markers distribution</strong></h1>

<!--begin.rcode cell_markers, eval = !is.null(plotter$hash_vars$anno_table)
    for(element_name in unique(plotter$hash_vars$anno_table$type)) {
        features <- plotter$hash_vars$anno_table[plotter$hash_vars$anno_table$type == element_name, ]$marker
        cat(paste0("<h2>", element_name, " markers</h2>"))
        cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
        cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DotPlot, height = 6, width = 6))
        cat("</div>")
    }
end.rcode-->

<!--begin.rcode cluster_markers, eval = !is.null(plotter$hash_vars$markers_list)
    for(condition in names(plotter$hash_vars$markers_list)) {
        plotter$hash_vars$condition_list <- plotter$hash_vars$markers_list[[condition]]
        for(element in seq(1:length((plotter$hash_vars$condition_list)))) {
            features <- plotter$hash_vars$condition_list[[element]]
            title <- paste0("Cluster ", element)
            cat(paste0("<h2>Conserved markers for cluster: ", element, "</h2>"))
            cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
            cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DotPlot, height = 6, width = 6))
            cat("</div>")
        }
    }
end.rcode-->

<h1><strong>Dimensionality reduction</strong></h1>
<h1><strong>UMAP</strong></h1>

<!--begin.rcode Complete_UMAP, fig.height = 12, fig.width = 12
    reduction <- "umap"
    cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
    group.by <- split.by <- NULL
    cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DimPlot))
    cat("</div>")
end.rcode-->
<!--begin.rcode umap_splits, fig.height = 12, fig.width = 12,
    for(condition in int_columns) {
        cat(paste0("<h1>Split by ", condition, "</h1>"))
        split.by <- condition
        cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
        cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DimPlot))
        cat("</div>")
    }
end.rcode-->

<!--begin.rcode umap_groups,
    for(condition in int_columns) {
        cat(paste0("<h1>Grouped by ", condition, "</h1>"))
        split.by <- NULL
        group.by <- condition
        cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
        cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DimPlot))
        cat("</div>")
    }
end.rcode-->

<!--begin.rcode DEG_volcanoes, eval = length(plotter$hash_vars$DEG_list) > 0
    saveRDS(plotter, "down_plotter.rds")
    cat("<h1><strong<DEGenes analysis</strong><h1>")
    for(i in seq(1, length(DEG_list))) {
        condition <- names(DEG_list)[i]
        condition_DEGs <- DEG_list[[condition]]
        cat(paste0("<h1>Top 10 ", condition, " DEGs</h1>"))
        for (j in seq(1, length(condition_DEGs))) {
            level <- names(condition_DEGs)[j]
            plotter$hash_vars$condition_DEGs <- condition_DEGs[[j]]
            cat(plotter$static_plot_main("condition_DEGs", custom_format = TRUE, plotting_function = DEGs_volcano))
        }
    }
end.rcode-->

<h1><strong>Top 10 markers</strong></h1>

<!--begin.rcode top_markers
    cat(plotter$table("markers", header = NULL, row_names = NULL, table_rownames = FALSE,
        styled = "dt", func = top_table))
end.rcode-->

<!--begin.rcode target_genes, eval = !is.null(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      cat(paste0("<h2>Target gene group: ", element_name, "</h2>"))
      cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
      cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DotPlot, height = 6, width = 6))
      cat("</div>")
    }
end.rcode-->

<h1><strong>Target gene presence</strong></h1>
<!--begin.rcode Target_gene_presence, eval = !is.null(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      cat(paste0("<h2>Target gene group: ", element_name, "</h2>"))
      cat(plotter$table("markers", header = NULL, row_names = NULL, table_rownames = FALSE,
        styled = "dt", func = subset_table))
    }

end.rcode-->

<h1><strong>Target gene expression</strong></h1>
<!--begin.rcode Target_gene_expression, eval = !is.null(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      cat(paste0("<h2>Target gene group: ", element_name, "</h2>"))
      cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
      cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Top_vlnplot))
      cat("</div>")
    }
end.rcode-->


<h1><strong>Target gene expression patterns</strong></h1>
<!--begin.rcode Target_patterns, eval = !is.null(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      cat(paste0("<h2>Target gene group: ", element_name, "</h2>"))
      cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
      cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_ftplot))
      cat("</div>")
    }
end.rcode-->
