
<!--begin.rcode setup

    colGEX <- c("grey85", "#FEE5D9", "#FCBBA1", "#FC9272", "#FB6A4A", "#EF3B2C", "#CB181D", "#99000D")
    int_columns <- plotter$hash_vars$int_columns
    target_genes <- plotter$hash_vars$target_genes
    markers <- plotter$hash_vars$markers
    DEG_list <- plotter$hash_vars$DEG_list
    
    Custom_DotPlot <- function(seu) {
        if(!any(features %in% rownames(SeuratObject::GetAssayData(plotter$hash_vars$seu)))) {
            return("<p>Object contains none of the specified features</p>")
        }
        scCustomize::DotPlot_scCustom(seu, unique(features), flip_axes = TRUE, 
                                      colors_use = colGEX, x_lab_rotate = TRUE) +
        ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90))
    }

    Custom_DimPlot <- function(seu) {
        Seurat::DimPlot(seu, reduction = reduction, label = label, repel = TRUE, split.by = split.by,
                        group.by = group.by) +
        ggplot2::theme(legend.position="none")
    }

    top_table <- function(df) {
        top <- 10
        if(nrow(df) < 10) {
            top <- nrow(df)
        }
        res <- df[order(df$avg_log2FC, decreasing = TRUE), ][1:top, ]
        return(res)
    }

    subset_table <- function(df) {
        res <- df[df$gene == features, ]
        return(res)
    }

    Top_vlnplot <- function(seu) {
        scCustomize::Stacked_VlnPlot(seu, pt.size = 0, x_lab_rotate = 90,
                                     features = sort(features))
    }

    Custom_ftplot <- function(seu) {
        scCustomize::FeaturePlot_scCustom(seu, reduction = "umap", pt.size = 0.1, num_columns = 1,
                                          features = feature, na_cutoff = NA, label = TRUE) +
        ggplot2::scale_color_gradientn(colors = colGEX) + ggplot2::coord_fixed()
    }

    DEGs_volcano <- function(input_DEGs) {
        EnhancedVolcano::EnhancedVolcano(input_DEGs,
                                         lab = rownames(input_DEGs),
                                         x = 'avg_log2FC', y = 'p_val_adj',
                                         ylim = -0.5,
                                         title = level,
                                         pCutoff = 0.05, FCcutoff = 0.1)
    }

    get_top_DEGs <- function(input_DEGs) {
        res <- input_DEGs[input_DEGs$p_val_adj < 0.05 & abs(input_DEGs$avg_log2FC > 1), ]
        res <- res[, c("gene", "p_val", "p_val_adj", "avg_log2FC", "pct.1", "pct.2")]
        return(res)
    }
    
end.rcode-->

<h1><strong>Single-Cell RNASeq Integration analysis</strong></h1>

<p>Seurat clusters are defined mathematically. Unless a manual cluster annotation file is provided,
our workflow finds cluster markers and compares them to the cell types annotation file. It then
analyses matches and determines the most likely cell type for the cluster. These markers are
plotted in the following graphs.</p>


<!--begin.rcode intro
cat(plotter$create_title("Quality Control", "QC", hlevel = 1, indexable = TRUE, clickable = FALSE,
                          t_id = "QC", clickable_text = ""))
end.rcode-->

<!--begin.rcode sample_qc_pct
    cat(plotter$create_title("Top genes expression heatmap", "sample QC", hlevel = 2, indexable = FALSE,
                              clickable = FALSE, t_id = "sample_qc_pct", clickable_text = ""))
    cat(plotter$prettify_div(plotter$heatmap(list(id = "sample_qc_pct",
                                                  title = "Top gene expression across samples", header = NULL,
                                                  text = FALSE, row_names = NULL, transpose = TRUE)),
                             preset = "magic"))
end.rcode-->

<!--begin.rcode cell_markers, eval = !is.null(plotter$hash_vars$cell_annotation)
    elements <- unique(plotter$hash_vars$cell_annotation$type)
    collapse_list <- vector(mode = "character", length = length(elements) + 1)
    names(collapse_list) <- c("subtitle", elements)
    for(element_name in elements) {
        features <- plotter$hash_vars$cell_annotation[plotter$hash_vars$cell_annotation$type == element_name, ]$marker
        collapse_list[element_name] <- paste(paste0("<h2>", element_name, " markers</h2>"),
                                       plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                                                                 plotting_function = Custom_DotPlot), preset = "magic"), sep = "\n")
    }
    collapse_list["subtitle"] <- "<h2>Expression of cell type markers across experiment clusters</h2>"
    markers_html <- paste0(paste(collapse_list, collapse = "\n"), "\n")
    cat(plotter$create_title("Markers distribution", "markers", hlevel = 2, indexable = FALSE, clickable = TRUE,
                             t_id = "markers_distribution", clickable_text = ""))
    cat(plotter$create_collapsable_container(id = "markers_distribution", html_code = markers_html))
end.rcode-->

<!--begin.rcode top_markers
    names <- plotter$hash_vars$seu@meta.data[["named_clusters"]]
    seurat_clusters <- plotter$hash_vars$seu@meta.data[["seurat_clusters"]]
    unique_clusters <- sort(unique(seurat_clusters))
    collapse_list <- vector(mode = "character", length = length(unique_clusters))
    for(cluster in as.numeric(unique_clusters)) {
        if(!is.null(names)) {
            name <- unique(plotter$hash_vars$seu@meta.data[seurat_clusters == cluster - 1, ]$named_clusters)
            title <- name
        } else {
            title <- cluster
        }
        plotter$hash_vars$cluster_markers <- plotter$hash_vars$markers[plotter$hash_vars$markers$cluster == cluster - 1, ]
        collapse_list[cluster + 1] <- paste(paste0("<h2>Top markers for cluster ", title),
                                            plotter$prettify_div(plotter$table("cluster_markers", header = NULL,
                                                    row_names = NULL, table_rownames = FALSE, styled = "dt",
                                                    func = top_table)), sep = "\n")
    }
    top_markers_html <- paste0(paste(collapse_list, collapse = "\n"), "\n")
    cat(plotter$create_title("Top 10 markers by cluster", "top markers", hlevel = 2, indexable = FALSE, clickable = TRUE,
                             t_id = "top_markers", clickable_text = ""))
    paragraph <- paste0("<p>These are the markers that best define the seurat cluster. They might ",
                        "not match cell type markers.</p>")
    cat(plotter$create_collapsable_container(id = "top_markers",
                                             html_code = paste(paragraph, top_markers_html,  sep = "\n")))
end.rcode-->

<!--begin.rcode Complete_UMAP
    cat(plotter$create_title("Dimensionality reduction", "dimreds", hlevel = 1, indexable = TRUE, clickable = FALSE,
                              t_id = "dimreds", clickable_text = ""))
    cat(plotter$create_title("UMAP", "full_umap", hlevel = 2, indexable = TRUE, clickable = FALSE,
                              t_id = "full_umap", clickable_text = ""))
    reduction <- "umap"
    label <- TRUE
    group.by <- split.by <- NULL
    cat(plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DimPlot),
                             preset = "magic"))
end.rcode-->

<!--begin.rcode umap_splits
    label <- FALSE
    for(condition in int_columns) {
        split.by <- condition
        html_code <- plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                                          plotting_function = Custom_DimPlot), preset = "magic")
        cat(plotter$create_title(paste0("Split by ", condition), paste0(condition, " split"), hlevel = 2,
                                 indexable = FALSE, clickable = TRUE, t_id = paste0(condition, "_split"),
                                 clickable_text = ""))
        cat(plotter$create_collapsable_container(id = paste0(condition, "_split"), html_code = html_code))
    }
end.rcode-->

<!--begin.rcode umap_groups
    label <- TRUE
    for(condition in int_columns) {
        split.by <- NULL
        group.by <- condition
        html_code <- plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                                          plotting_function = Custom_DimPlot), preset = "magic")
        cat(plotter$create_title(paste0("Grouped by ", condition), paste0(condition, " grouped"), hlevel = 2,
                                 indexable = FALSE, clickable = TRUE, t_id = paste0(condition, "_grouped"),
                                 clickable_text = ""))
        cat(plotter$create_collapsable_container(id = paste0(condition, "_grouped"), html_code = html_code))
    }
end.rcode-->

<!--begin.rcode cluster_pct
    cat(plotter$create_title("Cluster composition of samples", "cluster distribution", hlevel = 2,
                              indexable = FALSE, clickable = FALSE, t_id = "cluster_distribution",
                              clickable_text = ""))
    cat("<p>This plot represents the cluster composition of each sample.</p>")
    cat(plotter$prettify_div(plotter$heatmap(list(id = "clusters_pct", title = "Cell type percentage by sample",
                                             header = NULL, text = FALSE, row_names = NULL,
                                             transpose = TRUE)), preset = "magic"))
end.rcode-->

<!--begin.rcode DEG_analysis, eval = length(DEG_list) > 0
    cat(plotter$create_title("Differential expression analysis", "DEG", hlevel = 1, indexable = TRUE,
                              clickable = FALSE, t_id = "DEG", clickable_text = ""))
    for(i in seq(length(DEG_list))) {
        condition <- names(DEG_list)[i]
        idents <- unique(plotter$hash_vars$seu@meta.data[[condition]])
        condition_DEGs <- DEG_list[[condition]]
        cat(plotter$create_title(paste0("DEGs by ", condition), paste0(condition, "_DEGs"), hlevel = 2,
                             indexable = TRUE, clickable = TRUE, t_id = paste0(condition, "_DEGs"),
                             clickable_text = ""))
        cat(paste0("<p>Positive log2 fold change means higher expression levels in ", idents[1], "</p>"))
        level <- "global"
        title <- "Global"
        plotter$hash_vars$condition_DEGs <- condition_DEGs[["global"]]
        cat(plotter$prettify_div(plotter$static_plot_main("condition_DEGs", custom_format = TRUE,
                                 plotting_function = DEGs_volcano), preset = "magic"))
        html_code <- plotter$prettify_div(plotter$table("condition_DEGs", header = NULL, row_names = NULL,
                                                        table_rownames = FALSE, styled = "dt",
                                                        func = get_top_DEGs), preset = "magic")
        cat(plotter$create_title("Global DEGenes table", "global DEG table", hlevel = 3, indexable = FALSE,
                                  clickable = TRUE, t_id = "global_DEG_table", clickable_text = ""))
        cat(plotter$create_collapsable_container(id = "global_DEG_table", html_code = html_code))
        samples_html <- vector(mode = "character", length = length(condition_DEGs) - 1)
        for (j in seq(length(condition_DEGs) - 1)) {
            level <- names(condition_DEGs)[j]
            title <- paste0("Cluster ", level)
            plotter$hash_vars$condition_DEGs <- condition_DEGs[[j]]
            if(FALSE %in% condition_DEGs[[j]]) {
                main <- plotter$prettify_div(paste0("<p>Cluster ", j, "contained exclusive clusters,
                                         DEG analysis was not possible."), preset = "magic")
            }else{
                main <- plotter$prettify_div(plotter$static_plot_main("condition_DEGs", custom_format = TRUE,
                                 plotting_function = DEGs_volcano), preset = "magic")
                table_code <- plotter$prettify_div(plotter$table("condition_DEGs", header = NULL,
                                                                 row_names = NULL, table_rownames = FALSE,
                                                                 styled = "dt", func = get_top_DEGs),
                                                  preset = "magic")
                table_title <- plotter$create_title(paste0(title, " DEGenes table"), paste0(title," DEG table"), hlevel = 3,
                                         indexable = FALSE, clickable = TRUE, t_id = paste0(title, "_DEG_table"),
                                         clickable_text = "")
                table_container <- plotter$create_collapsable_container(id = paste0(title, "_DEG_table"),
                                                                        html_code = table_code)
            }
            samples_html[[j]] <- paste(main, table_title, table_container, collapse = "\n")
        }
        samples_html <- paste(samples_html, collapse = "\n")
        cat(plotter$create_title(paste0(condition, " DEG analysis by cluster"), paste0(condition, " DEG clusters"),
                                 hlevel = 2, indexable = FALSE, clickable = TRUE,
                                 t_id = paste0(condition, "_cluster_DEG"), clickable_text = ""))
        cat(plotter$create_collapsable_container(id = paste0(condition, "_cluster_DEG"), html_code = samples_html))
    }
end.rcode-->

<!--begin.rcode query_title, eval = !is.null(plotter$hash_vars$target_genes)
    cat(plotter$create_title("Query gene analysis", "query title", hlevel = 1,
                              indexable = TRUE, clickable = FALSE, t_id = "query_title",
                              clickable_text = ""))
end.rcode-->

<!--begin.rcode query_exp, eval = !is.null(plotter$hash_vars$query_exp)
    cat(plotter$create_title("Query gene expression heatmap", "query heatmap", hlevel = 2,
                              indexable = FALSE, clickable = FALSE, t_id = "query_heatmap",
                              clickable_text = ""))
    cat("<p>This plot represents gene expression profile across samples of query genes.
         Represented as the natural logarithm of count ratio, multiplied by a scale factor
         (see config file for exact value of scale factor).</p>")
    cat(plotter$prettify_div(plotter$heatmap(list(id = "query_exp",
                             title = "Query gene expression across samples",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE)), preset = "magic"))
end.rcode-->

<!--begin.rcode query_pct, eval = !is.null(plotter$hash_vars$query_pct)
    cat(plotter$create_title("Query gene cell percentages", "query samples", hlevel = 2,
                              indexable = FALSE, clickable = FALSE, t_id = "query_samples",
                              clickable_text = ""))
    cat(paste0("This plot represents the percentage of cells that express the query genes in each sample."))
    cat(plotter$prettify_div(plotter$heatmap(list(id = "query_pct",
                             title = "Percentage of cells expressing query gene",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE)), preset = "magic"))
end.rcode-->

<!--begin.rcode query_cluster_pct, eval = !is.null(plotter$hash_vars$query_cluster_pct)
    query_clusters <- vector(mode = "character", length = length(plotter$hash_vars$query_cluster_pct))
    for(i in seq(length(plotter$hash_vars$query_cluster_pct))) {
        plotter$hash_vars$query_combo <- plotter$hash_vars$query_cluster_pct[[i]]
        name <- names(plotter$hash_vars$query_cluster_pct)[i]
        query_clusters[i] <- plotter$prettify_div(plotter$heatmap(list(id = "query_combo", title = name,
                                                  header = NULL, text = FALSE, row_names = NULL, 
                                                  transpose = TRUE)), preset = "magic")
    }
    html_code <- paste(query_clusters, collapse = "\n")
    cat(plotter$create_title("Query gene cell percentages by cluster", "query cluster", hlevel = 2,
                              indexable = FALSE, clickable = TRUE, t_id = "query_cluster",
                              clickable_text = ""))
    cat(plotter$create_collapsable_container(id = "query_cluster", html_code = html_code))
end.rcode-->

<!--begin.rcode Query_gene_expression, eval = !is.null(plotter$hash_vars$target_genes)
    expressed_genes <- rownames(SeuratObject::GetAssayData(plotter$hash_vars$seu, "RNA"))
    html_code <- vector(mode = "character", length = length(plotter$hash_vars$target_genes))
    names(html_code) <- names(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      title <- cat(plotter$create_title(paste0("Violin plot of gene ", element_name),
                                        paste0(element_name, " violin"),
                                        hlevel = 3, indexable = FALSE, clickable = FALSE,
                                        t_id = paste0(element_name,"query_violin")))
      if(all(!features %in% expressed_genes)) {
        code <- cat(paste0("<p>None of the ", element_name, " group query genes were found in dataset.</p>"))  
      } else {
        code <- cat(plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                                         plotting_function = Top_vlnplot), preset = "magic"))
      }
      html_code[element_name] <- paste(title, code, sep = "\n")
    }
    html_code <- paste(html_code, collapse = "\n")
    cat(plotter$create_title("Query violin plots", "query_violins", hlevel = 2,
                              indexable = FALSE, clickable = TRUE))
    cat(plotter$create_collapsable_container(id = "query_violins", html_code <- html_code))
end.rcode-->

<!--begin.rcode query_genes, eval = !is.null(plotter$hash_vars$target_genes)
    cat(plotter$create_title("Query genes distribution", "query genes distribution", hlevel = 2,
                              indexable = FALSE, clickable = TRUE, t_id = "query_distrib",
                              clickable_text = ""))
    paragraph <- "<p>These genes have <strong>NOT</strong> been used to annotate clusters</p>"
    genes_code <- vector(mode = "character", length = length(plotter$hash_vars$target_genes))
    names(genes_code) <- names(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      title <- plotter$create_title(paste0("Query gene group: ", element_name),
                                    paste0(element_name, " distr"),
                                    hlevel = 2, indexable = FALSE, clickable = FALSE,
                                    t_id = paste0(element_name, "_distr"), clickable_text = "")
      code <- plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                                   plotting_function = Custom_DotPlot), preset = "magic")
      table_title <- plotter$create_title(paste0(element_name, " query table"),
                                          paste0(element_name, " Query Table"),
                                          hlevel = 3, indexable = FALSE, clickable = TRUE,
                                          t_id = paste0(element_name, "_query_table"), clickable_text = "")
      table <- plotter$prettify_div(plotter$table("markers", header = NULL, row_names = NULL,
                                                  table_rownames = FALSE, styled = "dt", func = subset_table),
                                                  preset = "magic")
      table <- plotter$create_collapsable_container(id = paste0(element_name, "_query_table"),
                                                    html_code = table)
      genes_code[element_name] <- paste(title, code, table_title, table, sep = "\n")
    }
    genes_code <- paste(genes_code, collapse = "\n")
    genes_code <- paste(paragraph, genes_code, sep = "\n")
    cat(plotter$create_collapsable_container(id = "query_distrib", html_code = genes_code))
end.rcode-->

<!--begin.rcode Query_patterns, eval = !is.null(plotter$hash_vars$target_genes)
    cat(plotter$create_title("Query expression map", "query maps", hlevel = 3, indexable = FALSE,
                              clickable = FALSE, t_id = "query_maps", clickable_text = ""))
    expressed_genes <- rownames(SeuratObject::GetAssayData(plotter$hash_vars$seu, "RNA"))
    for(element_name in names(plotter$hash_vars$target_genes)) {
        for(feature in plotter$hash_vars$target_genes[[element_name]]) {
            if(feature %in% expressed_genes) {
                cat(plotter$create_title(paste0("Query gene group: ", element_name),
                                         paste0(element_name, " map"), hlevel = 3, indexable = FALSE,
                                         clickable = FALSE, t_id = paste0(element_name, "_map"),
                                         clickable_text = ""))
                cat(plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                    plotting_function = Custom_ftplot), preset = "magic"))
            } else {
                cat(paste0("<p>Feature ", feature, " is not significantly expressed.</p>"))
            }
        }
    }
end.rcode-->
