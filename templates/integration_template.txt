
<!--begin.rcode setup

    colGEX <- c("grey85", "#FEE5D9", "#FCBBA1", "#FC9272", "#FB6A4A", "#EF3B2C", "#CB181D", "#99000D")
    int_columns <- plotter$hash_vars$int_columns
    target_genes <- plotter$hash_vars$target_genes
    markers <- plotter$hash_vars$markers
    DEG_list <- plotter$hash_vars$DEG_list
    
    Custom_DotPlot <- function(seu) {
        scCustomize::DotPlot_scCustom(seu, features, flip_axes = TRUE, 
                                      colors_use = colGEX, x_lab_rotate = TRUE) +
        ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90))
    }

    Custom_DimPlot <- function(seu) {
        Seurat::DimPlot(seu, reduction = reduction, label = label, repel = TRUE, split.by = split.by,
                        group.by = group.by) +
        ggplot2::theme(legend.position="none")
    }

    top_table <- function(df) {
        top <- 10
        if(nrow(df) < 10) {
            top <- nrow(df)
        }
        res <- df[order(df$avg_log2FC, decreasing = TRUE), ][1:top, ]
        return(res)
    }

    subset_table <- function(df) {
        res <- df[df$gene == features, ]
        return(res)
    }

    Top_vlnplot <- function(seu) {
        scCustomize::Stacked_VlnPlot(seu, pt.size = 0, x_lab_rotate = 90,
                                     features = sort(features))
    }

    Custom_ftplot <- function(seu) {
        scCustomize::FeaturePlot_scCustom(seu, reduction = "umap", pt.size = 0.1, num_columns = 1,
                                          features = feature, na_cutoff = NA, label = TRUE) +
        ggplot2::scale_color_gradientn(colors = colGEX) + ggplot2::coord_fixed()
    }

    DEGs_volcano <- function(input_DEGs) {
        EnhancedVolcano::EnhancedVolcano(input_DEGs,
                                         lab = rownames(input_DEGs),
                                         x = 'avg_log2FC', y = 'p_val_adj',
                                         ylim = -0.5,
                                         title = level,
                                         pCutoff = 0.05, FCcutoff = 0.1)
    }

    get_top_DEGs <- function(input_DEGs) {
        res <- input_DEGs[input_DEGs$p_val_adj < 0.05 & abs(input_DEGs$avg_log2FC > 1), ]
        res <- res[, c("gene", "p_val", "p_val_adj", "avg_log2FC", "pct.1", "pct.2")]
        return(res)
    }
    
end.rcode-->

<h1><strong>Single-Cell RNASeq Integration analysis</strong></h1>

<p>Seurat clusters are defined mathematically. Unless a manual cluster annotation file is provided,
our workflow finds cluster markers and compares them to the cell types annotation file. It then
analyses matches and determines the most likely cell type for the cluster. These markers are
plotted in the following graphs.</p

<h1><strong>Markers distribution</strong></h1>
<h2>Expression of cell type markers across experiment clusters</h2>

<!--begin.rcode cell_markers, eval = !is.null(plotter$hash_vars$cell_annotation)
    for(element_name in unique(plotter$hash_vars$cell_annotation$type)) {
        features <- plotter$hash_vars$cell_annotation[plotter$hash_vars$cell_annotation$type == element_name, ]$marker
        cat(paste0("<h2>", element_name, " markers</h2>"))
        cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
        cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DotPlot))
        cat("</div>")
    }
end.rcode-->

<h1><strong>Top 10 markers</strong></h1>
<p>These are the markers that best define the seurat cluster. They might
not match cell type markers.</p>

<!--begin.rcode top_markers
    names <- plotter$hash_vars$seu@meta.data[["named_clusters"]]
    seurat_clusters <- plotter$hash_vars$seu@meta.data[["seurat_clusters"]]
    for(cluster in as.numeric(sort(unique(seurat_clusters)))) {
        if(!is.null(names)) {
            name <- unique(plotter$hash_vars$seu@meta.data[seurat_clusters == cluster - 1, ]$named_clusters)
            title <- name
        } else {
            title <- cluster
        }
        cat(paste0("<h2>Top markers for cluster ", title))
        plotter$hash_vars$cluster_markers <- plotter$hash_vars$markers[plotter$hash_vars$markers$cluster == cluster - 1, ]
        cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
        cat(plotter$table("cluster_markers", header = NULL, row_names = NULL, table_rownames = FALSE,
            styled = "dt", func = top_table))  
        cat("</div>")
    }
end.rcode-->

<h1><strong>Cluster distribution heatmap</strong></h1>
<p>This plot represents the percentage of cells in each sample that were
assigned each cell type.</p>

<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">
<!--begin.rcode cluster_pct
    cat(plotter$heatmap(list(id = "clusters_pct", title = "Cell type percentage by sample",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE)))
end.rcode-->
</div>

<h1><strong>Query gene expression heatmap</strong></h1>
<p>This plot represents gene expression profile across samples of query genes.<br>
Represented as the natural logarithm of count ratio, multiplied by a scale factor
(see config file for exact value of scale factor).</p>

<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">
<!--begin.rcode query_exp
    cat(plotter$heatmap(list(id = "query_exp", title = "Query gene expression across samples",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE)))
end.rcode-->
</div>

<h1><strong>Dimensionality reduction</strong></h1>
<h1><strong>UMAP</strong></h1>

<!--begin.rcode Complete_UMAP
    reduction <- "umap"
    label <- TRUE
    cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
    group.by <- split.by <- NULL
    cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DimPlot))
    cat("</div>")
end.rcode-->
<!--begin.rcode umap_splits
    label <- FALSE
    for(condition in int_columns) {
        cat(paste0("<h1>Split by ", condition, "</h1>"))
        split.by <- condition
        cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
        cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DimPlot))
        cat("</div>")
    }
end.rcode-->
<!--begin.rcode umap_groups,
    label <- TRUE
    for(condition in int_columns) {
        cat(paste0("<h1>Grouped by ", condition, "</h1>"))
        split.by <- NULL
        group.by <- condition
        cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
        cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DimPlot))
        cat("</div>")
    }
end.rcode-->

<!--begin.rcode DEG_analysis, eval = length(plotter$hash_vars$DEG_list) > 0
    cat("<h1><strong<DEGenes analysis</strong><h1>")
    for(i in seq(1, length(DEG_list))) {
        condition <- names(DEG_list)[i]
        idents <- unique(plotter$hash_vars$seu@meta.data[[condition]])
        condition_DEGs <- DEG_list[[condition]]
        cat(paste0("<h1><strong>", idents[1], " vs ", idents[2], "</strong></h1>"))
        cat(paste0("<p>Positive log2 fold change means higher expression levels in ", idents[1], "</p>"))
        for (j in seq(1, length(condition_DEGs))) {
            level <- names(condition_DEGs)[j]
            title <- paste0("Cluster ", names(condition_DEGs)[j])
            plotter$hash_vars$condition_DEGs <- condition_DEGs[[j]]
            cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
            cat(plotter$static_plot_main("condition_DEGs", custom_format = TRUE, plotting_function = DEGs_volcano))
            cat("</div>")
            cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
            cat(plotter$table("condition_DEGs", header = NULL, row_names = NULL, table_rownames = FALSE,
                              styled = "dt", func = get_top_DEGs))
            cat("</div>")
        }
    }
end.rcode-->

<h1><strong>Query genes distribution</strong></h1>
<h2>Expression of query genes across identified clusters</h2>
<p>These genes have <strong>NOT</strong> been used to annotate clusters</p>

<!--begin.rcode query_genes, eval = !is.null(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      cat(paste0("<h2>Query gene group: ", element_name, "</h2>"))
      cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
      cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DotPlot))
      cat("</div>")
    }
end.rcode-->

<h1><strong>Query gene presence</strong></h1>
<!--begin.rcode Query_gene_presence, eval = !is.null(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      cat(paste0("<h2>Query gene group: ", element_name, "</h2>"))
      cat(plotter$table("markers", header = NULL, row_names = NULL, table_rownames = FALSE,
        styled = "dt", func = subset_table))
    }

end.rcode-->

<h1><strong>Query gene expression</strong></h1>
<!--begin.rcode Query_gene_expression, eval = !is.null(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      cat(paste0("<h2>Query gene group: ", element_name, "</h2>"))
      cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
      cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Top_vlnplot))
      cat("</div>")
    }
end.rcode-->


<h1><strong>Query gene expression patterns</strong></h1>
<p>Expression patterns of query genes. Only genes significantly expressed in dataset are plotted</p>
<!--begin.rcode Query_patterns, eval = !is.null(plotter$hash_vars$target_genes)
    expressed_genes <- rownames(SeuratObject::GetAssayData(plotter$hash_vars$seu, "RNA"))
    for(element_name in names(plotter$hash_vars$target_genes)) {
        cat(paste0("<h2>Query gene group: ", element_name, "</h2>"))
        for(feature in plotter$hash_vars$target_genes[[element_name]]) {
            if(feature %in% expressed_genes) {
                cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
                cat(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_ftplot))
                cat("</div>")
            }
        }
    }
end.rcode-->
